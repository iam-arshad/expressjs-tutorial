create a repo in github and clone it locally
git clone https://github.com/iam-arshad/expressjs-tutorial.git

C:\Users\arshad\VS code Projects\expressjs-tutorial>npm init

>npm i expressjs nodemon

create a file src/index.js:
console.log("abc");

Add these two commands under scripts in package.json:
"start":"node ./src/index.js",
"start:dev":"nodemon ./src/index.js"

>npm run start:dev
will start our server




2.get request
Install postman, an API platform for building and using APIs.
Write the code for the get request at /todos endpoint as mentioned in the src/index.js
>npm run dev:start
Postman:GET http://localhost:3000/todos
hit this api in postman, and you will get the data as response.




3.post request
Write the code for the post request at /todos endpoint as mentioned in the src/index.js
Postman: body/raw/json
{"title":"review pull requests","description":"review pull requests on github","completed":false}

will get the response of same todo with the todo id,
{
    "id": 3,
    "title": "review pull requests",
    "description": "review pull requests on github",
    "completed": false
}




4a.Query params
To filter the data on any endpoint
ex:
http://localhost:3000/todos?id=1
http://localhost:3000/todos?id=1&title=abc
>req.query
//{id:1,title:abc}
The code to handle those query params will be in the same endpoint(here http://localhost:3000/todos)




4b.url(route) params
to identify a specific resource
ex:
http://localhost:3000/todos/1
http://localhost:3000/todos/2
>req.params


5a.PUT request
This request is to update/replace the entire resource(a new resource can also be created)
As we have 2 todos in our data.If i want to update the 2nd todo
Postman:
PUT: http://localhost:3000/todos/2
Body/raw/JSON: {"title":"review pull requests","description":"review pull requests on github","completed":false}
When we hit this api,then the 2nd todo will be updated with the new data.


5b. PATCH request
This is to partially update the resource data.
If we want to update the todo status completed as true,
PATCH: http://localhost:3000/todos/1
Body/raw/JSON: {"completed":false}
When we hit this api,then the 1st todo will be updated with the new completed status as true.


6.DELETE request
To delete a resource
To delete a todo from the todos data,
DELETE: http://localhost:3000/todos/1
When we hit this api,then the 1st todo will be deleted and will return the deleted todo.



7.Common(most used) request and response object methods
Request Object (req):
req.params: An object containing route parameters, e.g., /users/:id will be available as req.params.id.
req.query: An object containing the parsed query parameters from the URL.
req.body: An object containing the parsed request body when using a middleware like body-parser to handle JSON, URL-encoded, or multi-part form data.
req.cookies: An object containing cookies sent by the client.
req.headers: An object containing the HTTP headers sent by the client.
req.method: The HTTP method used in the request (GET, POST, PUT, DELETE, etc.).
req.url: The URL of the request.
req.path: The path of the request (excluding query parameters).
req.protocol: The request protocol (http or https).
req.get(headerName): Get the value of an HTTP header.
...

Response Object (res):
res.send(data): Send a response with the specified data to the client. The data can be a string, object, or buffer.
res.json(data): Send a JSON response to the client.
res.status(code): Set the status code of the response.
res.redirect(path): Redirect the client to the specified path.
res.render(view, data): Render a view template and send it as a response to the client.
res.sendFile(path): Send a file as the response to the client.
res.set(headerName, value): Set an HTTP header in the response.
res.cookie(name, value, options): Set a cookie in the response.
res.clearCookie(name, options): Clear a cookie in the response.
res.locals: An object to pass data to the view template engine.
res.end(): End the response process.
Note: can also be chained like res.status(201).send("ok");



