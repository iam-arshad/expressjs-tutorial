THIS IS JUST FOR MY REFERENECE BUT NOT TO TEACH ANYONE ELSE😂

Express is not only for creating api's but also for
✔ Authentication and Authorization
✔ Server side rendering(using template engines like pug,ejs,...)
✔ Single page apps
✔ Proxy servers(to act as a temporary server which routes to specific server based on type of req)
✔ To build real world apps like chat applications using socket.io
✔To build microservices


create a repo in github and clone it locally
git clone https://github.com/iam-arshad/expressjs-tutorial.git

C:\Users\arshad\VS code Projects\expressjs-tutorial>npm init

>npm i expressjs nodemon

create a file src/index.js:
console.log("abc");

Add these two commands under scripts in package.json:
"start":"node ./src/index.js",
"start:dev":"nodemon ./src/index.js"

>npm run start:dev
will start our server




2.get request
Install postman, an API platform for building and using APIs.
Write the code for the get request at /todos endpoint as mentioned in the src/index.js
>npm run dev:start
Postman:GET http://localhost:3000/todos
hit this api in postman, and you will get the data as response.




3.post request
Write the code for the post request at /todos endpoint as mentioned in the src/index.js
Postman: body/raw/json
{"title":"review pull requests","description":"review pull requests on github","completed":false}

will get the response of same todo with the todo id,
{
    "id": 3,
    "title": "review pull requests",
    "description": "review pull requests on github",
    "completed": false
}




4a.Query params
To filter the data on any endpoint
ex:
http://localhost:3000/todos?id=1
http://localhost:3000/todos?id=1&title=abc
>req.query
//{id:1,title:abc}
The code to handle those query params will be in the same endpoint(here http://localhost:3000/todos)




4b.url(route) params
to identify a specific resource
ex:
http://localhost:3000/todos/1
http://localhost:3000/todos/2
>req.params
NOTE:Make sure that the route with url params should have to be at the bottom(in order to not to affect other routes)


5a.PUT request
This request is to update/replace the entire resource(a new resource can also be created)
As we have 2 todos in our data.If i want to update the 2nd todo
Postman:
PUT: http://localhost:3000/todos/2
Body/raw/JSON: {"title":"review pull requests","description":"review pull requests on github","completed":false}
When we hit this api,then the 2nd todo will be updated with the new data.


5b. PATCH request
This is to partially update the resource data.
If we want to update the todo status completed as true,
PATCH: http://localhost:3000/todos/1
Body/raw/JSON: {"completed":false}
When we hit this api,then the 1st todo will be updated with the new completed status as true.


6.DELETE request
To delete a resource
To delete a todo from the todos data,
DELETE: http://localhost:3000/todos/1
When we hit this api,then the 1st todo will be deleted and will return the deleted todo.



7.Common(most used) request and response object methods
Request Object (req):
req.params: An object containing route parameters, e.g., /users/:id will be available as req.params.id.
req.query: An object containing the parsed query parameters from the URL.
req.body: An object containing the parsed request body when using a middleware like body-parser to handle JSON, URL-encoded, or multi-part form data.
req.cookies: An object containing cookies sent by the client.
req.headers: An object containing the HTTP headers sent by the client.
req.method: The HTTP method used in the request (GET, POST, PUT, DELETE, etc.).
req.url: The URL of the request.
req.path: The path of the request (excluding query parameters).
req.protocol: The request protocol (http or https).
req.get(headerName): Get the value of an HTTP header.
...

Response Object (res):
res.send(data): Send a response with the specified data to the client. The data can be a string, object, or buffer.
res.json(data): Send a JSON response to the client.
res.status(code): Set the status code of the response.
res.redirect(path): Redirect the client to the specified path.
res.render(view, data): Render a view template and send it as a response to the client.
res.sendFile(path): Send a file as the response to the client.
res.set(headerName, value): Set an HTTP header in the response.
res.cookie(name, value, options): Set a cookie in the response.
res.clearCookie(name, options): Clear a cookie in the response.
res.locals: An object to pass data to the view template engine.
res.end(): End the response process.
Note: can also be chained like res.status(201).send("ok");



8. Middlewares
Middlewares in Express are functions that have access to the request (req) and response (res) objects and the next function.
They enable you to perform various tasks in between processing a request and sending a response.
Middlewares are used for tasks such as authentication, logging, error handling, and parsing the request body.
Each middleware can perform its action and then choose to either pass the request to the next middleware in the chain or respond to the client directly.

A middleware is defined using the app.use() method
Even the route handler is a middleware.
Middleware can be custom defined functions,3rd party packages like body-parser, morgan, cors,helmet,...

a)Middleware for all the routes:
app.use((req,res,next)=>{...;next();})

b)Middleware for a specific route
app.get("/todos",(req,res,next)=>{..;next();},(req,res)=>{....})
Here there is only 1 middleware but we can chain many middlewares(in which each calls the other using next() until it reaches the route handler)

Execute code on every request:
1.Middlewares defined using app.use() are executed on every incoming request regardless of the request method (GET, POST, etc.) or the URL.
2.Order of Middleware Execution:
in the order they are declared in your application. So, if you have multiple middlewares defined, the first middleware gets executed first, then the second, and so on.
3.Manipulate Request and Response:
Middlewares have access to both the req and res objects. You can read and modify request data, set response headers, and perform other operations before sending the final response.
4.Handle Errors:
You can define error-handling middleware functions using four parameters (err, req, res, next). These middleware functions are called whenever there is an error during the request-response cycle.
5.Terminate Request-Response Cycle:
A middleware can also decide to terminate the request-response cycle by responding to the client directly without calling the next() function.



9. Express Router
In our tutorial upto now we have only todos section, but in the furthur sections we need to have database connectivity and so on.For that, if we write all our code in index.js, it will be difficult later on for debugging,updating,....
you can organize your routes into separate modules and then use the Express Router to manage these routes. This approach makes your code more modular and easier to maintain as your application grows.

create new directories & files in src as routes/todos/todos.js and move all the code related to the todos.
modify the code from app(Express instance) to router(Router instance)
export that router from todos.js and import it in src/index,js and mount it as a middleware at the prefix "/todos"

Now our enpoints will be accessible at the base path of http://localhost:3000/todos/
Ex:
GET: http://localhost:3000/todos/todos
GET: http://localhost:3000/todos/todos?id=1
GET: http://localhost:3000/todos/todos/1
POST: http://localhost:3000/todos/todos
PUT:http://localhost:3000/todos/todos/1
PATCH: http://localhost:3000/todos/todos/1
DELETE: http://localhost:3000/todos/todos/1
where the first "todos" is the prefix and the second "todos" is the endpoint, we will fix them in the next chapter


10. Prefixes
To modify our endpoint paths, we have to do that in the todos router.
Now our enpoints will be accessible at the base path of http://localhost:3000/todos/
Ex:
GET: http://localhost:3000/todos
GET: http://localhost:3000/todos?id=1
GET: http://localhost:3000/todos/1
POST: http://localhost:3000/todos
PUT:http://localhost:3000/todos/1
PATCH: http://localhost:3000/todos/1
DELETE: http://localhost:3000/todos/1

We can also prefix like versions of api,...
ex:
For http://localhost:3000/api/v1/todos/
use the middleware app.use("/api/v1/todos",todosRouter);


11.cookies
Cookies are small pieces of data that a server --->user's web browser(stores them), 
Cookies(are sent back to) --->server with each subsequent request, allowing the server to recognize the user or store small amounts of user-specific information like
User Preferences: Store user preferences, such as language preference, theme, or display settings.
Remember Me: For "Remember Me" functionality during login, you can store a persistent session identifier in a cookie.
Authentication Tokens: Store short-lived authentication tokens (such as JWTs) to maintain user sessions across requests.
Tracking and Analytics: Store tracking information for analytics and user behavior analysis.
Shopping Cart: Store minimal cart information for e-commerce sites.
Personalization: Store data used to personalize user experiences, like recently viewed items or recommended content.

>npm install cookie-parser
To set a cookie:(res obj as we are creating in server side)
res.cookie('username', 'john', { maxAge: 900000, httpOnly: true })
To get a cookie:(req obj as we are getting it from client side)
req.cookies.username

updated the index.js file with the code related to cookies
Now test the endpoints
http://localhost:3000/set-cookie
check the cookies now with the name "username" has the value of 
username=john; Path=/; HttpOnly; Expires=Tue, 08 Aug 2023 02:13:22 GMT;

http://localhost:3000/get-cookie
will get the username from cookies(if it has not expired)




12.Sessions
Cookies are limited to 4KB in size and lives in client side(prone to attacks).
Sessions are a way to store user-specific data on the server side and associate it with a particular user. A session usually involves creating a unique session ID for each user, and this ID is stored in a cookie on the user's browser.

What to store in sessions:
User Authentication State: Store whether a user is logged in or not.
User Profile Data: Store user-specific information that might be required across multiple pages, such as username, email, and user role.
Sensitive Data: Store sensitive data that should not be exposed to the client, like server-side generated tokens or API keys.
Temporary Data: Store temporary data that needs to be preserved across requests, like form data that spans multiple pages.
Access Control Information: Store information about user roles and permissions.
Cart and Order Data: Store comprehensive cart information, order history, and other e-commerce related data.

In this example, I will remove the code from the previous chapter of cookies and will create a login route which uses both cookies(not to store sensitive data) and sessions.
>npm i express-session
Make the code changes according to this commit and temporary
http://localhost:3000/auth/login
Body/raw/JSON:
{
    "username":"user1",
    "password":"password1"
}
and then try
http://localhost:3000/auth/profile




13. Protected routes
Session data itself is typically stored on the server's side in memory, a database, or another form of storage. The session identifier stored in the cookie is used to look up the corresponding session data on the server.

In this chapter, we will make all the routes as protected routes(except auth routes like login,profile,logout) so that only authenticated users can be able to access other(todo,...) routes. We can modify the existing middleware function which was written in chapter 8 to check whether the user is loggedin or not.

Mount the authRoute before mounting the loggedIn middleware.
Now, if we try any of our todo routes or profile route, it will show that the user is not loggedIn.
After logging in, all the other routes are accessible until we hit the logout request.



14.MongoDB
In this chapter, we will connect our application with the LOCAL mongodb database.For that, install the following softwares in your system
1.MongoDB community server
2.MongoDB shell
3.MongoDB compass

>npm i mongoose
We will create 3 new files for this
1.database/index.js(for local database connection)
2.database/schemas/users.js(for creating schema of user collection)
3.Using the above collection(in routes/auth/auth.js) for /register,/login routes in our application

DONT FORGET TO IMPORT THE database/index.js FILE IN ENTRY FILE OF THE APPLICATION. SPENT 5-6HRS TO FIGUREOUT THE ISSUE😢
postman:
POST: http://localhost:3000/auth/register
body/raw/JSON:
{
    "username":"mehatab@abc.com",
    "password":"abc@0#ai"
}
For the first time, it will create a document(record) in the collection(table) "users".But if we try registering with the same username then  it will give 401 with "user already exists".
We can check all these documents(records) of users in Compass or in mongodb shell.
Note: These will be in local environment only but in the cloud(mongodb atlas dashboard).


15. Auth routes integration with MongoDB
In general, no one will save the raw passwords in the db.Passwords will be encripted(original password can be retrieved) or hashed(original password cant be retrieved) and then saved into the db. Everytime when the user logs in, the raw password entered by the user will be hashed and then we will compare this hashed value and the already hashed value in the db.For this, we will use bcript library.
As we use these hashPassword and comparePasswords and to login the user very often, I have kept the code related to this in utils directory.
Update the code as per this commit and try 
a.registering,loggingIn,profile,logout routes.
b.Try to access todo routes before registering/loggingIn just to check that they are protected
c.Do the same after registering/loggingIn.


16. Rendering HTML with a template engine
Template engine is a part of Express that enables us to use static files in our applications.Template engine converts variables to values and changes the template to HTML files to send to the client.
Ex: ejs, pug,...
Here in this tutorial we will use ejs template engine to render the home,register,login pages so that we can access our application from a WEB BROWSER.

In the home page(https://localhost:3000) we will display a h1 and if the user is
👆 logged in, we will display his username(will be passed from src/index.js to src/views/index.ejs)
👆 not logged in, will display 2 buttons to register,login pages

>npm i ejs
create a directory(views) in src directory
We will use the same pattern for ejs files, as we have used for routes like src/views/auth contains register.ejs,login.ejs


When sending different types of responses like res.render(),res.redirect(),res.json(),... among which we can use only one at a time
which will make us difficult to use our app from postman(to send data) and also from a web browser(to render,redirect)
So, we have a request header req.get("User-Agent") which gives us the client name.Based on the client we can modify our api to work for both a web browser as well as postman.

Summary:
1.create a html forms for home(http://localhost:3000),register(http://localhost:3000/auth/register) and login(http://localhost:3000/auth/login) ejs files. 
2.create a get request(src/routes/auth/auth.js) and render form from there
3.In browser, on submission will hit the POST call of that form's action attribute


17.a.Passport.js Local Strategy
As of now, we have written our custom code for user Authorization which includes 
for login(post) route:storing user's data in session and cookies,
For logout(get) route: removing the user's data in session and cookies,
for dashboard(get) route:getting user's data from session and cookies,
custom middleware for protected routes

Not only these, we can get all these(plus some additional features) using another technique by default if we implement Passport.js Local Strategy.
✒Passport.js is a popular authentication middleware for Node.js applications, and it provides various authentication strategies, including the Local Strategy. The Local Strategy is used for authenticating users based on a username and password stored in your application's database.
✒Serialization is the process of converting a user object(eg.,user id) into a format that can be easily stored, typically in a session. This process is performed when a user logs in, and their user data needs to be saved in the session for future requests. Serialization allows Passport.js to identify the user during subsequent requests.
✒Deserialization is the process of retrieving user information from the session and converting it back into a user object. This is essential when handling subsequent requests from authenticated users.
✒structure of done method: done(error,user obj,msg)

>npm i passport passport-local
👆All the setup for passport.js Local Strategy was implemented in src/strategies/local.js
👆Modify post login route handler with the passport.js local strategy route handler(with routes to successful & unsuccessful login)
👆import local strategy file in src/index.js and add middlewares(initialize passport,passport session)

Now,run the application,http://localhost:3000
and try to login with the credentials,for
✔successful login, it will route to http://localhost:3000/todos,
❌for failed login, it will route to http://localhost:3000/auth/login

NOTE: For now, I have commented the loggedInMiddleware middleware in src/index.js and in the furthur chapters we can use the built in features of Passport.js for authentication,logout,profile,.... In sha Allah😊



17.b. Passport.js Local Strategy features
👆For protected routes, we can use req.isAuthenticated() which return a boolean value
👆If the user is already logged in, we need to redirect the user to home page(if the user tries get/post methods of register,login routes)
👆For logout route, use res.logout((err)=>{...}) method and redirect the user to login page


17.c. Logging in the user after successful registration
👆 Use passport.js's req.login(user,(err)=>{...}) method to login the user after successful registration.


18. Passport Google OAuth2 Strategy

In some websites, we might have seen like sign in with google/microsoft/apple/github account instead of signing up with a username & password. In some websites, we can upload files to that website directly from the drive. we When its signing up with a google account then that mechanism is called as Google OAuth2. It allows users to grant limited access to their resources without sharing their credentials, like usernames and passwords, with the third-party applications.

Google OAuth2 is an authentication and authorization framework provided by Google that allows third-party applications to access a user's Google services, such as Gmail, Google Drive, Google Calendar, and more, on their behalf. OAuth2 (short for "Open Authorization 2.0") is a widely used industry standard for secure authorization and authentication.

Here's how Google OAuth2 works:
a.User Consent(Allow/Deny): When a user wants to use a third-party application that requires access to their Google services, the application redirects the user to Google's authentication system. The user is asked to grant permissions to the application to access specific data or services.
b.Authentication: The user is prompted to sign in with their Google credentials
c.Authorization: After logging in, the user is presented with a consent screen, which details the specific permissions the third-party application is requesting (e.g., read access to Gmail, write access to Google Calendar). The user can either grant or deny these permissions.
d.Access Tokens: If the user grants permission, Google generates an access token. This token is provided to the third-party application. The application can then use this token to make requests to Google's APIs on behalf of the user.
e.Refreshing Tokens: Access tokens have a limited lifespan. To maintain access, the application can use a refresh token (if provided during the initial authorization). This allows the application to obtain a new access token without the user's involvement.

We need to do some initial setup in Google cloud console.
https://console.cloud.google.com
✅Create a Project in Google Cloud Platform:
Create a new project or select an existing one where you want to set up OAuth2.

✅Enable some api's in the project:
for example: project/Api's & services/Enable Api's & services/(search for)Youtube Data API/Enable

✅As discussed earlier, we need to ask permission for the email,profile of a user. So we need to get access for them.
A.project/Api's & services/credentials/create credentials/oAuth client ID/configure consent screen/external/create/fill the form
B.scopes(will be based on the api's enabled)
Ex: email,profile,...
C.Test Users
add email id
D.click on dashboard

✅create client Id and client secret
project/Api's & services/credentials/create credentials/oAuth clientID/web app'n & name(give the name of the app here)/create

✅Add a redirect url(to redirect to that url after successful authorization)
project/Api's & services/credentials/OAuth2 clientID/Authorize redirect url/(enter the url here Ex: http://localhost:3000/auth/api/google/redirect)/save

>npm i passport-google-oauth20 dotenv

Instead of storing our clientID,secret,... in the code I am storing them in environment variables.So that we can use them in runtime using dotenv npm package which takes values from a .env file and loads them into process.env when the application runs.

SCENARIO: In our app, we will register the new users with their google account and will save their email id(as username) and googleId.




19.flash messages using connect-flash
>npm i connect-flash
connect-flash is a library which allows you to flash messages whenever you are redirected to another webpage. Typically, when you log in to a website, a message would ‘flash’ on top of your screen indicating your success or failure in logging in.

Note: The flash message is stored in the session and typically used for redirects only. Moreover, the flash message is intended to be flashed once and then removed from the session store. This makes sense because if the session store started accumulating these flash messages, your app would run into issues with memory.

set the flash message in one route before redirection with req.flash("key","msg...")
and redirect to another route
and display the flash message(which was stored in session) using req.flash("key") in that redirected route
will be removed,if we refresh the page

in "auth/logout", we are setting flash message before redirection
in "/", we are using the flash message which is there in request object(can be used here itself/ can be sent to ejs file).




20.serve static files
To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express.

Ex: use the following code to serve images, CSS files, and JavaScript files in a directory named "public"
app.use(express.static('public'))

project-directory/
  └── public/
      ├── html
          ├──about.html
      ├── images
            ├──a.png
            ├──b.png
      └── script.js

Now, you can load the files that are in the public directory:
http://localhost:3000/images/a.png
http://localhost:3000/images/b.png
http://localhost:3000/html/about.html
http://localhost:3000/script.js


To serve in a specific route, use prefix like app.use("/static",express.static("public"));
http://localhost:3000/static/images/a.png
http://localhost:3000/static/images/b.png





21.Error handling middleware
In Express, error handling middleware is used to handle errors that occur during the execution of your application. It's crucial for improving the robustness and reliability of your application.

The error handling middleware are defined in the same way as other middleware functions, except that error-handling functions MUST have four arguments instead of three – err, req, res, next.

✅created an api at /todos/example by throwing an error and by calling next(err)
✅created an error handling middleware in src/index.js

IT SHOULD HAVE TO BE AFTER ALL THE ROUTES IN THE END
BUT BEFORE THE SERVER LISTENER


22a. Protected routes using JWT
In sessions, we will create a session in server and stores some data in it and then we will send that id of session to the client and the client will send that session_id to the server for every subsequent request(generally for authentication,to retrieve some session data,...).
Due to the below reasons, maintaining sessions in the server is not encouraged
a.makes them hard to scale your application horizontally by adding more server instances.(needs server storage)
b.security
...

JWT, or JSON Web Tokens, is to securely transmit information between parties as a JSON object. 
We can send a JWT(JSON obj) to a user on login and can can verify on other protected routes(eg:profile route) that the user is authenticated.They are commonly used for authentication and authorization in web applications, including Express.js applications.

Unlike sessions, we will not store anything in the server. On login, we will create(with some data in it) and will send an access token(a JWT) to the user in the encoded form and the client has to send(headers/authorization) that access token on every subsequent request. So that we can decode that JWT(by making sure that its a valid one) and can reuse the data present in the JWT like the loggedIn user,user's id,...

general format of a JWT is [header].[payload].[signature]
ex: eyJhzVCJ9.eyJpZCI6IjY1M.CkuDkZYapgF
If we modify its value, then JWT will be invalid

we can decode that JWT in https://jwt.io/
Decoded JWT ex:
HEADER:
{
  "alg": "HS256",
  "typ": "JWT"
}
PAYLOAD:
{
  "id": "652a10cabbd4d164681436fa",
  "username": "a@a.com",
  "iat": 1697893868,
  "exp": 1697897468,
  ......
  ......
}
VERIFY_SIGNATURE:{
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  your-256-bit-secret)
}


Real world usecases of JWT:
Other than authorization and data exchange, we can use JWT in the scenarios like
1.To authenticate in all microservices(in an app) with a single login(ex:google login-->mail,maps,drive,keep,contacts,....)
2.To authenticate in all the server instances(if one server got loaded,then the user should not have to login if the user is redirected to another server instance by the load balancer)

In our app'n,
we will send an access token jwt(which contains user's id and username) to the user on logging in
will make the profile route authenticated and can only be accessed with an access token in the req header

To create a JWT, we will use sign({data},secret,[{expiresIn: '1h',.......}]) method
To verify it in protected routes, we will use verify(accessToken,secret,(err,data)=>{}) method
from jsonwebtoken npm package
Note: for more about the additional parameters to these methods,refer https://www.npmjs.com/package/jsonwebtoken

>npm i jsonwebtoken
Testing:
In postman, /login will give an access token
give that access token as Authorization header in /profile and make the request




22b. refresh token using JWT
Our access token will be expired after the time we have specified in jwt.sign(). If we want to give access to the protected routes to the users even after the access token is expired, we need to use refresh token. After logging in, we will send the accessToken(which will be expired) and the refreshToken(which will not expire,but used to retrieve a new accessToken when the previous one is expired & also all the refreshTokens will be saved to our mongodb collection for that user document).

we will create another route at /token to send the new accessToken(when the previous accessToken expires) by verifying the refreshToken(which was sent through req.body).

In our application,
Generally in our app'n, user will be logged in upto 1hr as we have maxAge 1hr in the session middleware in src/index.js.
/login will give accessToken(which will be expired after 30secs) & refreshToken(which will not expire)
User can access the protected route /profile as long as the accessToken is'nt expired.
Once the accessToken is expired, user can get a new accessToken from /token by sending the refreshToken

Test(in Postman):
/login -->AT,RT
/profile can be accessed as long as the accessToken is not expired
once the accessToken is expired, user will not be able to access the protected route /profile
/token(RT)-->new AT
with the new AT, user can access the /profile again.




22c. Log out functionality with JWT
NOw, we need to invalidate the accessToken and the refreshToken. Generally if the user logs out, we are logging them out using passportjs's method request.logout() which will prevent the user from accessing routes other than register & login. 

For 
a)additional security(to invalidate the refreshTokens)
b)to remove unnecessary refreshTokens which are there in the database for that user's document
we need to invalidate those refreshTokens from furthur being used.

Test(In postman/Browser):
/login
/profile(AT)
...
/logout

Note:
Imagine a scenario where the user logs into his account in different devices/clients/sessions/...To logout the user 
a)from a specific session/client/... or 
b)from all the sessions/clients/...
we need to change the schema as below and should have to remove that clients specific/all refreshTokens

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

// Define the Device schema
const deviceSchema = new Schema({
  deviceId: String,
  refreshTokens: [String], // Array of refresh tokens associated with this device
});

// Define the User schema
const userSchema = new Schema({
  username: String,
  password: String,
  googleId: String,
  devices: [deviceSchema], // Array of devices associated with the user
});

// Create a model for the User collection
const User = mongoose.model('User', userSchema);
module.exports = User;


23. a)Testing express app with plain jest
prerequisites: jest

>npm i -D jest
>npx jest --init

In jest.config.js: 
uncomment the block
testMatch: [
    "**/__tests__/**/*.[jt]s?(x)",
    "**/?(*.)+(spec|test).[tj]s?(x)"
  ],

In my 3 years of experience, I can say that
In manual testing, we can cover almost most of the scenarios, but when a small change is made later on, then in order to test that the existing functionality of other components is not affected, writing test cases will be helpful.

IN our express app, all the route handlers are anonymous functions which cant be exported for testing. So I have created a directory(controllers) in src directory and in a file I have pasted the passportjs's verify function and is exported to the src/strategies/local.js

Now in test files,
__tests__/controllers/strategies/localStrategyAuth.test.js
I am importing that file and will be writing the testcases for it.

>npm run test [fileName]

Its important to open and close database connection with beforeEach and afterEach for evry test case.
Why? Because when you try to test CRUD against the same record for same collection with the same database connection, of course you will encounter race condition. Even though this is something that won’t happen in production time.




23. b)Testing express api's with supertest
In the previous commit, as we refactored the code by moving the route handlers to a separate directory(i.e.,controllers), now we can test the actual api's with an npm library called supertest. To achive 100% test coverage, we need to do the same(move to /controllers) for all the route handlers. As of now, I will test the auth api's in the directory src/routes/auth/auth.js

>npm install supertest --save-dev
Supertest is a library for testing Node.js HTTP servers.
It enables us to programmatically send HTTP requests such as GET, POST, PATCH, PUT, DELETE to HTTP servers and get results.
https://www.albertgao.xyz/2017/05/24/how-to-test-expressjs-with-jest-and-supertest/

Problem: 
isAuthenticated method which is added to req object by passport(either by local||oauth20) is creating an issue in the middleware(loggedInMiddleware) in src/index.js. So, didnt mocked passport library. Try to mock to achieve faster,independent results.


24. Final changes
created a separate schem for todos which will have a field related to the userId field. Completed setup for rendering ejs templates.


25. NODE_ENV env variable to control env mode
To maintain different environments like development,test,stage,production in the app, we need to maintain different sets of databases,builds,....even rest of the environment variables based on NODE_ENV environment variable.
->create different .env files like .env.development, .env.production,.... and add the env specific env variables like DB URL's
->create different webpack config files for different builds like webpack.config.dev.js,webpack.config.prod.js,....

Flow: npm command will set the NODE_ENV, and in index.js need to load the rest of the environment variables based on the path given, which is based on the NODE_ENV set in the npm command.
a)set the NODE_ENV value in package.json/scripts
"scripts": {
  "start": "NODE_ENV=development node app.js",
  "start:prod": "NODE_ENV=production node app.js"
  "build:dev": "webpack --config webpack.config.dev.js",
  "build:prod": "webpack --config webpack.config.prod.js",
}
But for windows os, this process is slightly different, so we need to use cross-env package
>npm i cross-env
Now, update the above scripts to
"scripts": {
  "start": "cross-env NODE_ENV=development node app.js",
  "start:prod": "cross-env NODE_ENV=production node app.js",
  "build:dev": "cross-env NODE_ENV=development webpack --config webpack.config.dev.js",
  "build:prod": "cross-env NODE_ENV=production webpack --config webpack.config.prod.js"
}

b)Load the environment variables based on the NODE_ENV
src/index.js:
//based on NODE_ENV value set in npm script,it will load the relative .env file(.env.production/.env.development/...)
require('dotenv').config({
  path: `.env.${process.env.NODE_ENV || 'development'}`
});
//Now,rest of the env variables which are set in env files can be accessed from process.env
const dbUrl = process.env.DB_URL;
console.log(`Connecting to database: ${dbUrl}`);



Not only for configs, we can make our app different from one environment to another by keeping these conditions
if (process.env.NODE_ENV === 'production') {
  // Production-specific logic
} else {
  // Development-specific logic
}

